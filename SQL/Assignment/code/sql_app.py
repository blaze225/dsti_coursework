# -*- coding: utf-8 -*-
# Imports
import pandas as pd
import pyodbc
import os
import sys

# Global variables: default values
server_name = "DESKTOP-8UIQTCR"
db_name = "Survey_Sample_A19"


def surveyCursor(sql_conn):
    """
    Generator for SurveyId in table [Survey_Sample_A19].[dbo].[Survey]

    Parameters
    ----------
    sql_conn : pyodbc.Connection
        pyodbc connection object

    Yields
    ------
    pandas.core.series.Series
        A row containing SurveyId
        

    """
    # Get all SurveyIds
    query = "SELECT SurveyId FROM Survey ORDER BY SurveyId"
    try:
        df = queryToDataframe(query, sql_conn)
    except:
        raise Exception("Unable to execute Query!")
    # Yield
    for i in range(len(df)):
        yield df.iloc[i]

def currentQuestionCursor(currentSurveyId, sql_conn):
    """
    Generator for QuestionId in table [Survey_Sample_A19].[dbo].[SurveyStructure]

    Parameters
    ----------
    currentSurveyId : int
        A value from the Column SurveyId of the table [dbo].[Survey]
    sql_conn : pyodbc.Connection
        pyodbc connection object

    Yields
    ------
    pandas.core.series.Series
        A row of Pandas Dataframe

    """
    query = f"""SELECT * FROM
					(	SELECT SurveyId, QuestionId, 1 as InSurvey
						FROM SurveyStructure
						WHERE SurveyId = {currentSurveyId}
				        UNION SELECT {currentSurveyId} as SurveyId, Q.QuestionId, 0 as InSurvey
						FROM Question as Q
						WHERE NOT EXISTS
						(   SELECT *
							FROM SurveyStructure as S
							WHERE S.SurveyId = {currentSurveyId} AND S.QuestionId = Q.QuestionId
						)
					) as t
					ORDER BY QuestionId; """
    # Get the query results in a dataframe
    try:
        df = queryToDataframe(query, sql_conn)
    except:
        raise Exception("Unable to execute Query!")
    
    # Yield row-wise
    for i in range(len(df)):
        yield df.iloc[i]

def getAllSurveyData(sql_conn):
    """
    Implementation of the SQL function [Survey_Sample_A19].[dbo].getAllSurveyData


    Parameters
    ----------
    sql_conn : pyodbc.Connection
        pyodbc connection object

    Returns
    -------
    strFinalQuery : str
        The final dynamically generated query string

    """
    # Defining templates for dynamic queries
    queryTemplateForAnswerColumn = """
                COALESCE( 
				(
					SELECT a.Answer_Value
					FROM Answer as a
					WHERE
						a.UserId = u.UserId
						AND a.SurveyId = <SURVEY_ID>
						AND a.QuestionId = <QUESTION_ID>
				), -1) AS ANS_Q<QUESTION_ID> """
    
    queryTemplateForNullColumnn = """ NULL AS ANS_Q<QUESTION_ID> """
    queryTemplateOuterUnionQuery = """
                SELECT
    					UserId
    					, <SURVEY_ID> as SurveyId
    					, <DYNAMIC_QUESTION_ANSWERS>
    			FROM
    				[User] as u
    			WHERE EXISTS
    			(
    					SELECT *
    					FROM Answer as a
    					WHERE u.UserId = a.UserId
    					AND a.SurveyId = <SURVEY_ID>
    			) """
    
    currentUnionQueryBlock = ""
    strFinalQuery = ""
    # Tracking the first UNION
    isFirstUnion = True
    # Open Survey Cursor/Generator 
    for currentSurveyId in surveyCursor(sql_conn):
        # Add a UNION between column statements except for the first one
        if isFirstUnion:
            isFirstUnion = False
        else:
            strFinalQuery += ' UNION '
        
        columnsQueryPart = ""
        # Tracking the first comma
        isFirstComma = True
        # Open Current Question Cursor/Generator
        for question in currentQuestionCursor(int(currentSurveyId), sql_conn):
            # Add a comma between column statements except for the first one
            if isFirstComma:
                isFirstComma = False
            else:
                columnsQueryPart += ' , '

            currentSurveyIdInQuestion, currentQuestionID, currentInSurvey = question
            # Current Question not in Current Survey
            if currentInSurvey == 0:
                columnsQueryPart = columnsQueryPart + queryTemplateForNullColumnn.replace("<QUESTION_ID>", str(currentQuestionID))
            # Current Question is in Current Survey
            else:
                columnsQueryPart = columnsQueryPart + queryTemplateForAnswerColumn.replace("<QUESTION_ID>", str(currentQuestionID))
        # Substituting the dynamic parts in the currentUnionQueryBlock
        currentUnionQueryBlock = queryTemplateOuterUnionQuery.replace("<DYNAMIC_QUESTION_ANSWERS>", columnsQueryPart)
        currentUnionQueryBlock = currentUnionQueryBlock.replace("<SURVEY_ID>", str(int(currentSurveyId)))
        strFinalQuery+= currentUnionQueryBlock
    
    return strFinalQuery

def refreshSurveyView(sql_conn):
    """
    Creates/Updates the view [Survey_Sample_A19].[dbo].[vw_AllSurveyData] using the query generated by the function getAllSurveyData

    Parameters
    ----------
    sql_conn : pyodbc.Connection
        pyodbc connection object

    Returns
    -------
    None.

    """
    # Create a cursor from the connection "sql_conn"
    try:
        cursor = sql_conn.cursor()
    except:
        raise Exception("Unable to create a cursor!")
    # Creating a query to update the view by using the dynamically genrated query from getAllSurveyData()
    strSQLSurveyData = " CREATE OR ALTER VIEW vw_AllSurveyData AS "
    strSQLSurveyData += getAllSurveyData(sql_conn)
    # Execute the query
    try:
        cursor.execute(strSQLSurveyData)
    except:
        raise Exception("Unable to execute Query!\n")
    # Commit and close the cursor
    cursor.commit()
    cursor.close()

def checkForTableModification(sql_conn):
    """
    Trigger implementation: Checks whether the table [Survey_Sample_A19].[dbo].[SurveyStructure] has been modified

    Parameters
    ----------
    sql_conn : pyodbc.Connection
        pyodbc connection object

    Returns
    -------
    modified : bool
        Indicates the state of modification of the table
    """
    modified = True
    # Read data from the table 
    try:
        df_new = queryToDataframe("SELECT * FROM [Survey_Sample_A19].[dbo].[SurveyStructure]", sql_conn)
    except:
        raise Exception("Unable to execute Query!")

    # Check whether 'SurveyStructure.csv' exists
    if os.path.exists('SurveyStructure.csv'):
        # Get old data from the csv
        try:
            df_old = pd.read_csv('SurveyStructure.csv')
        except:
            raise Exception("Unable to read SurveyStructure.csv!")
        # Check whether the table has been modified by comparing the dataframes
        if not df_old.equals(df_new):
            # Update the view
            refreshSurveyView(sql_conn)
            # Update the csv
            try:
                df_new.to_csv('SurveyStructure.csv', index=False)
            except:
                raise Exception("Unable to create SurveyStructure.csv!\n")
            print("Changes detected in the table [Survey_Sample_A19].[dbo].[SurveyStructure]!\nUpdating the view [Survey_Sample_A19].[dbo].[vw_AllSurveyData]...")
        else:
            # No changes
            modified = False
            print("No changes detected in the table [Survey_Sample_A19].[dbo].[SurveyStructure]!")
    else:
        # The script is running for the first time
        # Save the data into a csv
        df_new.to_csv('SurveyStructure.csv')
        # Create the view
        refreshSurveyView(sql_conn)
        print("Created the view [Survey_Sample_A19].[dbo].[vw_AllSurveyData]!")
    
    return modified

def generatePivotedSurveyData(sql_conn):
    """
    Query and store the pivoted survey data in a csv

    Parameters
    ----------
    sql_conn : pyodbc.Connection
        pyodbc connection object

    Returns
    -------
    None.

    """
    # Get query results in a dataframe
    try:
        query = getAllSurveyData(sql_conn)
        survey_df = queryToDataframe(query, sql_conn)
    except:
        raise Exception("Unable to execute Query!")
    # Save dataframe as csv
    try:
        survey_df.to_csv('PivotedSurveyData.csv')
    except:
        raise Exception("Unable to create PivotedSurveyData.csv!")
    print("Generated fresh PivotedSurveyData.csv!")

def queryToDataframe(query, sql_conn):
    """
    Execute given query and return results in a Pandas Dataframe

    Parameters
    ----------
    query : str
        The query to be run
    sql_conn : pyodbc.Connection
        pyodbc connection object

    Returns
    -------
    pandas.core.frame.DataFrame
        A Pandas DataFrame

    """
    return pd.read_sql(query, sql_conn)

def main():
    
    # Check for command line arguments
    if len(sys.argv) < 2:
        raise Exception("Please provide the name of the server on Microsoft SQL SERVER!")
    
    # Populate serve_name
    server_name = sys.argv[1]
    # Create connection_string
    connection_string = (
        r'DRIVER={SQL Server};'
        r'SERVER='+server_name+';'
        r'DATABASE='+db_name+';'
        r'Trusted_Connection=yes;'
    )
    
    # Connection to MS SQL Server
    try:
        sql_conn = pyodbc.connect(connection_string)
    except:
        raise Exception("Unable to connect to MSSQL Server!")

    # Check for updates to the table [Survey_Sample_A18].[dbo].[SurveyStructure]
    updationNeeded = checkForTableModification(sql_conn)
    # Generate the pivoted survey data if needed
    if updationNeeded:
        generatePivotedSurveyData(sql_conn)
    # Display result status
    cwd = os.path.abspath(os.getcwd())
    print("Fresh View in MS SQL Sever: dbo.vw_AllSurveyData")
    print("Fresh Pivoted Survey Data: "+ cwd.replace("\\\\","\\") + "\\" + "PivotedSurveyData.csv")
    # Close the connection
    sql_conn.close()

if __name__ == "__main__":
    main()